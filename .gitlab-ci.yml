# Pipeline to build a binary image and then to deploy it as a docker image

stages:
  - Clone
  - Test_Clone
  - Stage
  - Production
workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web"'

# General cache on all jobs
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/

# Global variables
variables:
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_TLS_VERIFY: 1
  DOCKER_CERT_PATH: "/certs/client"
  APP_VERSION: "latest"
  DOCKER_IMAGE_FOR_BINARY_CREATION_STARTER: "vsoare/execute_pipelines_java_code:0.0.1"
  PATH_FOR_ARTIFACTS: "/builds/vsoare/fastwebserver"
  TAG_FOR_THE_RUNNER: "webserver"


clone application repository:
  stage: Clone
  tags:
    - "${TAG_FOR_THE_RUNNER}"
  image: alpinelinux/alpine-gitlab-ci
  script:
    - printf "\033[1;5;42m %s \033[0m \n" "Cloning the repository...."
    - git clone https://gitlab.com/vsoare/fastwebserver.git
  artifacts:
      paths:
        - "${PATH_FOR_ARTIFACTS}"


test if cloning successfully:
  stage: Test_Clone
  tags:
    - "${TAG_FOR_THE_RUNNER}"
  image: alpine:3.19
  script:
    - printf "\033[1;5;42m %s \033[0m \n" "Checking if repository was cloned as it should!"
    - if [[ ! -e ./src || ! -d ./src ]]; then
        printf "\033[31m%s\033[0m\n" " - > src directory doesn't exist. project was not cloned with success!";
        exit 1;
      fi
      
      printf "\033[1;5;42m %s \033[0m \n" " - > src directory exists. fastwebserver successfully cloned!";
  artifacts:
    paths:
      - "${PATH_FOR_ARTIFACTS}"


build application binary for staging:
  stage: Stage
  environment:
    name: Staging
  tags:
    - "${TAG_FOR_THE_RUNNER}"
  image: "${DOCKER_IMAGE_FOR_BINARY_CREATION_STARTER}"
  script:
    - printf "\033[1;5;42m %s \033[0m \n" "Make the script executable for staging environment"
    - chmod +x ./deployment/build-binary-image.sh
    - printf "\033[1;5;42m %s \033[0m \n" "Execute the script that builds the binary with GraalVM in staging environment"
    - ./deployment/build-binary-image.sh
  artifacts:
    paths:
      - "${PATH_FOR_ARTIFACTS}"


build application image for staging:
  stage: Stage
  environment:
    name: Staging
  tags:
    - "${TAG_FOR_THE_RUNNER}"

  image: docker:latest

  services:
    - name: docker:dind
      alias: docker

  script:
    - printf "\033[1;5;42m %s \033[0m \n" "Build the docker image in staging environment."
    - docker build -f ./deployment/build-docker-image-with-application-binary-image.DockerFile -t vsoare/fastwebserver:staging-"${APP_VERSION}"-"${CI_COMMIT_SHORT_SHA}" .
    - printf "\033[1;5;42m %s \033[0m \n" "Authenticate to Docker Hub Registry in staging env."
    - echo "${DOCKER_TOKEN}" | docker login --username ${DOCKER_USERNAME} --password-stdin
  artifacts:
    paths:
      - "${PATH_FOR_ARTIFACTS}"


build application binary for production:
  stage: Production
  environment:
    name: Production
  only:
    - master
  tags:
    - "${TAG_FOR_THE_RUNNER}"
  image: "${DOCKER_IMAGE_FOR_BINARY_CREATION_STARTER}"
  script:
    - printf "\033[1;5;42m %s \033[0m \n" "Make the script executable for production environment"
    - chmod +x ./deployment/build-binary-image.sh
    - printf "\033[1;5;42m %s \033[0m \n" "Execute the script that builds the binary with GraalVM in production."
    - ./deployment/build-binary-image.sh
  artifacts:
    paths:
      - "${PATH_FOR_ARTIFACTS}"


build application image for production:
  stage: Production
  environment:
    name: Production
  only:
    - master
#  when: manual
#  allow_failure: false
  tags:
    - "${TAG_FOR_THE_RUNNER}"

  image: docker:latest

  services:
    - name: docker:dind
      alias: docker

  script:
    - printf "\033[1;5;42m %s \033[0m \n" "Build the docker image for production"
    - docker build -f ./deployment/build-docker-image-with-application-binary-image.DockerFile -t vsoare/fastwebserver:"${APP_VERSION}"-"${CI_COMMIT_SHORT_SHA}" .
    - printf "\033[1;5;42m %s \033[0m \n" "Authenticate to Docker Hub Registry for production env."
    - echo "${DOCKER_TOKEN}" | docker login --username ${DOCKER_USERNAME} --password-stdin
    - printf "\033[1;5;42m %s \033[0m \n" "Push the docker image to registry in production."
    - docker push vsoare/fastwebserver:"${APP_VERSION}"-"${CI_COMMIT_SHORT_SHA}"
